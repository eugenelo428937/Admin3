# Generated by Django 5.2.2 on 2025-10-07 11:21

from django.db import migrations
from decimal import Decimal
from datetime import date


def populate_vat_data(apps, schema_editor):
    """
    Populate utils tables with initial VAT data:
    - Regions: UK, IE, EU, SA, ROW
    - Countries: Copy from country_country with VAT rates
    - Country-Region mappings
    """
    UtilsRegion = apps.get_model('utils', 'UtilsRegion')
    UtilsCountrys = apps.get_model('utils', 'UtilsCountrys')
    UtilsCountryRegion = apps.get_model('utils', 'UtilsCountryRegion')
    Country = apps.get_model('country', 'Country')

    # 1. Populate utils_regions
    regions_data = [
        {'code': 'UK', 'name': 'United Kingdom', 'description': 'United Kingdom VAT region', 'active': True},
        {'code': 'IE', 'name': 'Ireland', 'description': 'Ireland VAT region', 'active': True},
        {'code': 'EU', 'name': 'European Union', 'description': 'European Union VAT region (excluding UK and IE)', 'active': True},
        {'code': 'SA', 'name': 'South Africa', 'description': 'South Africa VAT region', 'active': True},
        {'code': 'ROW', 'name': 'Rest of World', 'description': 'Rest of World VAT region', 'active': True},
    ]

    for region_data in regions_data:
        UtilsRegion.objects.create(**region_data)

    # 2. Populate utils_countrys with VAT rates
    # Define VAT rates by region (in percentage)
    vat_rates = {
        'UK': Decimal('20.00'),  # UK: 20%
        'IE': Decimal('23.00'),  # Ireland: 23%
        'EU': Decimal('20.00'),  # EU default: 20% (varies by country, but using average)
        'SA': Decimal('15.00'),  # South Africa: 15%
        'ROW': Decimal('0.00'),  # Rest of World: 0%
    }

    # Mapping of country codes to regions
    country_region_mapping = {
        # UK countries
        'GB': 'UK',  # United Kingdom

        # Ireland
        'IE': 'IE',  # Ireland

        # EU countries (excluding UK and IE)
        'AT': 'EU', 'BE': 'EU', 'BG': 'EU', 'HR': 'EU', 'CY': 'EU',
        'CZ': 'EU', 'DK': 'EU', 'EE': 'EU', 'FI': 'EU', 'FR': 'EU',
        'DE': 'EU', 'GR': 'EU', 'HU': 'EU', 'IT': 'EU', 'LV': 'EU',
        'LT': 'EU', 'LU': 'EU', 'MT': 'EU', 'NL': 'EU', 'PL': 'EU',
        'PT': 'EU', 'RO': 'EU', 'SK': 'EU', 'SI': 'EU', 'ES': 'EU',
        'SE': 'EU',

        # South Africa
        'ZA': 'SA',

        # Rest of World (special cases mentioned in spec)
        'CH': 'ROW',  # Switzerland
        'GG': 'ROW',  # Guernsey
    }

    # Copy countries from country_country (only ISO 3166-1 alpha-2 codes - 2 characters)
    for country in Country.objects.filter(iso_code__regex=r'^[A-Z]{2}$'):
        # Determine region and VAT rate
        region_code = country_region_mapping.get(country.iso_code, 'ROW')
        vat_percent = vat_rates.get(region_code, Decimal('0.00'))

        # Create UtilsCountrys entry
        UtilsCountrys.objects.create(
            code=country.iso_code,
            name=country.name,
            vat_percent=vat_percent,
            active=True
        )

    # 3. Populate utils_country_region mappings
    effective_date = date(2020, 1, 1)  # Historical effective date

    for country in UtilsCountrys.objects.all():
        region_code = country_region_mapping.get(country.code, 'ROW')
        region = UtilsRegion.objects.get(code=region_code)

        UtilsCountryRegion.objects.create(
            country=country,
            region=region,
            effective_from=effective_date,
            effective_to=None  # Open-ended
        )


def reverse_vat_data(apps, schema_editor):
    """Reverse the data migration by deleting all populated data."""
    UtilsRegion = apps.get_model('utils', 'UtilsRegion')
    UtilsCountrys = apps.get_model('utils', 'UtilsCountrys')
    UtilsCountryRegion = apps.get_model('utils', 'UtilsCountryRegion')

    # Delete in reverse order of dependencies
    UtilsCountryRegion.objects.all().delete()
    UtilsCountrys.objects.all().delete()
    UtilsRegion.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('utils', '0004_utilscountrys_utilsregion_utilscountryregion'),
        ('country', '__latest__'),  # Depend on country app for Country model
    ]

    operations = [
        migrations.RunPython(populate_vat_data, reverse_vat_data),
    ]
