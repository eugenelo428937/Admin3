# Generated by Django 5.2.2 on 2025-06-20 11:02

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("utils", "0004_remove_emaillog_redundant_fields"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name="emailcampaign",
            name="tags",
        ),
        migrations.CreateModel(
            name="EmailContentPlaceholder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Placeholder name (e.g., 'TUTORIAL_CONTENT')",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="Human-readable placeholder name", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of what this placeholder is for",
                    ),
                ),
                (
                    "default_content",
                    models.TextField(
                        blank=True, help_text="Default content when no rules match"
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=False,
                        help_text="This placeholder must be present in templates",
                    ),
                ),
                (
                    "allow_multiple_rules",
                    models.BooleanField(
                        default=False,
                        help_text="Allow multiple rules to contribute content",
                    ),
                ),
                (
                    "content_separator",
                    models.CharField(
                        default="\n",
                        help_text="Separator when multiple rules match",
                        max_length=50,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "templates",
                    models.ManyToManyField(
                        blank=True,
                        related_name="placeholders",
                        to="utils.emailtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Content Placeholder",
                "verbose_name_plural": "Email Content Placeholders",
                "db_table": "utils_email_content_placeholder",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="EmailContentRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Rule name for identification", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Rule description and purpose"
                    ),
                ),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("product_based", "Product-Based Content"),
                            ("user_attribute", "User Attribute-Based"),
                            ("order_value", "Order Value-Based"),
                            ("location_based", "Location/Country-Based"),
                            ("date_based", "Date/Time-Based"),
                            ("custom_condition", "Custom Condition"),
                        ],
                        help_text="Type of rule condition",
                        max_length=30,
                    ),
                ),
                (
                    "condition_field",
                    models.CharField(
                        help_text="Field name to evaluate (e.g., 'items.product_id', 'user.country')",
                        max_length=100,
                    ),
                ),
                (
                    "condition_operator",
                    models.CharField(
                        choices=[
                            ("equals", "Equals"),
                            ("not_equals", "Not Equals"),
                            ("in", "In List"),
                            ("not_in", "Not In List"),
                            ("greater_than", "Greater Than"),
                            ("less_than", "Less Than"),
                            ("greater_equal", "Greater Than or Equal"),
                            ("less_equal", "Less Than or Equal"),
                            ("contains", "Contains"),
                            ("not_contains", "Does Not Contain"),
                            ("starts_with", "Starts With"),
                            ("ends_with", "Ends With"),
                            ("regex_match", "Regular Expression Match"),
                            ("exists", "Field Exists"),
                            ("not_exists", "Field Does Not Exist"),
                        ],
                        help_text="Comparison operator",
                        max_length=20,
                    ),
                ),
                (
                    "condition_value",
                    models.JSONField(help_text="Value(s) to compare against"),
                ),
                (
                    "additional_conditions",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Additional AND/OR conditions",
                    ),
                ),
                (
                    "custom_logic",
                    models.TextField(
                        blank=True,
                        help_text="Custom Python logic for complex conditions",
                    ),
                ),
                (
                    "content_template",
                    models.TextField(
                        help_text="MJML/HTML content template to insert when rule matches"
                    ),
                ),
                (
                    "content_variables",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Variables available in content template",
                    ),
                ),
                (
                    "placeholder_name",
                    models.CharField(
                        help_text="Placeholder name in main template (e.g., 'TUTORIAL_CONTENT')",
                        max_length=100,
                    ),
                ),
                (
                    "insert_position",
                    models.CharField(
                        choices=[
                            ("replace", "Replace Placeholder"),
                            ("before", "Before Placeholder"),
                            ("after", "After Placeholder"),
                            ("append", "Append to End"),
                            ("prepend", "Prepend to Beginning"),
                        ],
                        default="replace",
                        help_text="How to insert content relative to placeholder",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=0,
                        help_text="Rule priority (higher numbers processed first)",
                    ),
                ),
                (
                    "is_exclusive",
                    models.BooleanField(
                        default=False,
                        help_text="Stop processing other rules if this one matches",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Content Rule",
                "verbose_name_plural": "Email Content Rules",
                "db_table": "utils_email_content_rule",
                "ordering": ["-priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="EmailTemplateContentRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_enabled",
                    models.BooleanField(
                        default=True, help_text="Enable this rule for this template"
                    ),
                ),
                (
                    "priority_override",
                    models.IntegerField(
                        blank=True,
                        help_text="Override rule priority for this template",
                        null=True,
                    ),
                ),
                (
                    "content_override",
                    models.TextField(
                        blank=True,
                        help_text="Override content template for this specific template",
                    ),
                ),
                (
                    "variables_override",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Override variables for this template",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "content_rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="template_associations",
                        to="utils.emailcontentrule",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="template_content_rules",
                        to="utils.emailtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Template Content Rule",
                "verbose_name_plural": "Template Content Rules",
                "db_table": "utils_email_template_content_rule",
                "ordering": ["-priority_override", "-content_rule__priority"],
                "unique_together": {("template", "content_rule")},
            },
        ),
        migrations.AddField(
            model_name="emailcontentrule",
            name="templates",
            field=models.ManyToManyField(
                related_name="content_rules",
                through="utils.EmailTemplateContentRule",
                to="utils.emailtemplate",
            ),
        ),
    ]
