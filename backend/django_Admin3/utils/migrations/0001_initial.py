# Generated by Django 5.2.2 on 2025-09-11 11:30

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="EmailAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Attachment name/identifier", max_length=200
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="Filename shown to recipients", max_length=200
                    ),
                ),
                (
                    "attachment_type",
                    models.CharField(
                        choices=[
                            ("static", "Static File"),
                            ("dynamic", "Dynamic Generated"),
                            ("template", "Template-based"),
                            ("external", "External URL"),
                        ],
                        default="static",
                        max_length=20,
                    ),
                ),
                (
                    "file_path",
                    models.CharField(
                        blank=True,
                        help_text="Path to static file or template",
                        max_length=500,
                    ),
                ),
                (
                    "file_content",
                    models.BinaryField(
                        blank=True, help_text="Binary content for small files"
                    ),
                ),
                (
                    "file_url",
                    models.URLField(
                        blank=True, help_text="External URL for attachments"
                    ),
                ),
                (
                    "mime_type",
                    models.CharField(
                        blank=True, help_text="MIME type of attachment", max_length=100
                    ),
                ),
                (
                    "file_size",
                    models.BigIntegerField(default=0, help_text="File size in bytes"),
                ),
                (
                    "is_conditional",
                    models.BooleanField(
                        default=False, help_text="Attachment depends on email context"
                    ),
                ),
                (
                    "condition_rules",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Rules for conditional inclusion",
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Email Attachment",
                "verbose_name_plural": "Email Attachments",
                "db_table": "utils_email_attachment",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="EmailContentPlaceholder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Placeholder name (e.g., 'TUTORIAL_CONTENT')",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="Human-readable placeholder name", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of what this placeholder is for",
                    ),
                ),
                (
                    "default_content_template",
                    models.TextField(
                        blank=True,
                        help_text="Default MJML/HTML content template when no rules match",
                    ),
                ),
                (
                    "content_variables",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Variables available in content templates for this placeholder",
                    ),
                ),
                (
                    "insert_position",
                    models.CharField(
                        choices=[
                            ("replace", "Replace Placeholder"),
                            ("before", "Before Placeholder"),
                            ("after", "After Placeholder"),
                            ("append", "Append to End"),
                            ("prepend", "Prepend to Beginning"),
                        ],
                        default="replace",
                        help_text="How to insert content relative to placeholder",
                        max_length=20,
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=False,
                        help_text="This placeholder must be present in templates",
                    ),
                ),
                (
                    "allow_multiple_rules",
                    models.BooleanField(
                        default=False,
                        help_text="Allow multiple rules to contribute content",
                    ),
                ),
                (
                    "content_separator",
                    models.CharField(
                        default="\n",
                        help_text="Separator when multiple rules match",
                        max_length=50,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Email Content Placeholder",
                "verbose_name_plural": "Email Content Placeholders",
                "db_table": "utils_email_content_placeholder",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="EmailContentRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Rule name for identification", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Rule description and purpose"
                    ),
                ),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("product_based", "Product-Based Content"),
                            ("user_attribute", "User Attribute-Based"),
                            ("order_value", "Order Value-Based"),
                            ("location_based", "Location/Country-Based"),
                            ("date_based", "Date/Time-Based"),
                            ("custom_condition", "Custom Condition"),
                        ],
                        help_text="Type of rule condition",
                        max_length=30,
                    ),
                ),
                (
                    "condition_field",
                    models.CharField(
                        help_text="Field name to evaluate (e.g., 'items.product_code', 'user.country')",
                        max_length=100,
                    ),
                ),
                (
                    "condition_operator",
                    models.CharField(
                        choices=[
                            ("equals", "Equals"),
                            ("not_equals", "Not Equals"),
                            ("in", "In List"),
                            ("not_in", "Not In List"),
                            ("greater_than", "Greater Than"),
                            ("less_than", "Less Than"),
                            ("greater_equal", "Greater Than or Equal"),
                            ("less_equal", "Less Than or Equal"),
                            ("contains", "Contains"),
                            ("not_contains", "Does Not Contain"),
                            ("starts_with", "Starts With"),
                            ("ends_with", "Ends With"),
                            ("regex_match", "Regular Expression Match"),
                            ("exists", "Field Exists"),
                            ("not_exists", "Field Does Not Exist"),
                        ],
                        help_text="Comparison operator",
                        max_length=20,
                    ),
                ),
                (
                    "condition_value",
                    models.JSONField(help_text="Value(s) to compare against"),
                ),
                (
                    "additional_conditions",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Additional AND/OR conditions",
                    ),
                ),
                (
                    "custom_logic",
                    models.TextField(
                        blank=True,
                        help_text="Custom Python logic for complex conditions",
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=0,
                        help_text="Rule priority (higher numbers processed first)",
                    ),
                ),
                (
                    "is_exclusive",
                    models.BooleanField(
                        default=False,
                        help_text="Stop processing other rules if this one matches",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "placeholder",
                    models.ForeignKey(
                        help_text="Placeholder that this rule targets",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="content_rules",
                        to="utils.emailcontentplaceholder",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Content Rule",
                "verbose_name_plural": "Email Content Rules",
                "db_table": "utils_email_content_rule",
                "ordering": ["-priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="EmailSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        help_text="Setting key", max_length=100, unique=True
                    ),
                ),
                (
                    "setting_type",
                    models.CharField(
                        choices=[
                            ("smtp", "SMTP Configuration"),
                            ("queue", "Queue Settings"),
                            ("tracking", "Tracking Settings"),
                            ("template", "Template Settings"),
                            ("security", "Security Settings"),
                            ("performance", "Performance Settings"),
                            ("integration", "Integration Settings"),
                        ],
                        default="template",
                        max_length=20,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="Human-readable setting name", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Setting description and purpose"
                    ),
                ),
                (
                    "value",
                    models.JSONField(
                        help_text="Setting value (can be string, number, object, etc.)"
                    ),
                ),
                (
                    "default_value",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Default value for this setting",
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=False,
                        help_text="Setting is required for system operation",
                    ),
                ),
                (
                    "is_sensitive",
                    models.BooleanField(
                        default=False,
                        help_text="Setting contains sensitive information",
                    ),
                ),
                (
                    "validation_rules",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Validation rules for the setting value",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Setting",
                "verbose_name_plural": "Email Settings",
                "db_table": "utils_email_settings",
                "ordering": ["setting_type", "key"],
            },
        ),
        migrations.CreateModel(
            name="EmailTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Template identifier", max_length=100, unique=True
                    ),
                ),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("order_confirmation", "Order Confirmation"),
                            ("password_reset", "Password Reset"),
                            ("password_reset_completed", "Password Reset Completed"),
                            ("account_activation", "Account Activation"),
                            ("newsletter", "Newsletter"),
                            ("welcome", "Welcome Email"),
                            ("reminder", "Reminder Email"),
                            ("notification", "System Notification"),
                            ("marketing", "Marketing Email"),
                            ("support", "Support Email"),
                            ("custom", "Custom Email"),
                        ],
                        default="custom",
                        max_length=50,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="Human-readable template name", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Template description and purpose"
                    ),
                ),
                (
                    "subject_template",
                    models.CharField(
                        help_text="Email subject template with variables",
                        max_length=300,
                    ),
                ),
                (
                    "content_template_name",
                    models.CharField(
                        help_text="MJML content template filename", max_length=100
                    ),
                ),
                (
                    "use_master_template",
                    models.BooleanField(
                        default=True, help_text="Use master template system"
                    ),
                ),
                (
                    "from_email",
                    models.EmailField(
                        blank=True,
                        help_text="Override default from email",
                        max_length=254,
                    ),
                ),
                (
                    "reply_to_email",
                    models.EmailField(
                        blank=True, help_text="Reply-to email address", max_length=254
                    ),
                ),
                (
                    "default_priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=20,
                    ),
                ),
                (
                    "enable_tracking",
                    models.BooleanField(
                        default=True, help_text="Enable open/click tracking"
                    ),
                ),
                (
                    "enable_queue",
                    models.BooleanField(
                        default=True, help_text="Queue emails instead of immediate send"
                    ),
                ),
                (
                    "max_retry_attempts",
                    models.IntegerField(
                        default=3, help_text="Maximum retry attempts for failed emails"
                    ),
                ),
                (
                    "retry_delay_minutes",
                    models.IntegerField(
                        default=5, help_text="Delay between retries in minutes"
                    ),
                ),
                (
                    "enhance_outlook_compatibility",
                    models.BooleanField(
                        default=True, help_text="Apply Outlook enhancements"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_email_templates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Template",
                "verbose_name_plural": "Email Templates",
                "db_table": "utils_email_template",
                "ordering": ["template_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="EmailQueue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "queue_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "to_emails",
                    models.JSONField(help_text="List of recipient email addresses"),
                ),
                (
                    "cc_emails",
                    models.JSONField(
                        blank=True, default=list, help_text="CC email addresses"
                    ),
                ),
                (
                    "bcc_emails",
                    models.JSONField(
                        blank=True, default=list, help_text="BCC email addresses"
                    ),
                ),
                (
                    "from_email",
                    models.EmailField(
                        blank=True, help_text="Sender email address", max_length=254
                    ),
                ),
                (
                    "reply_to_email",
                    models.EmailField(
                        blank=True, help_text="Reply-to email address", max_length=254
                    ),
                ),
                (
                    "subject",
                    models.CharField(help_text="Email subject", max_length=300),
                ),
                (
                    "email_context",
                    models.JSONField(default=dict, help_text="Template context data"),
                ),
                (
                    "html_content",
                    models.TextField(blank=True, help_text="Pre-rendered HTML content"),
                ),
                (
                    "text_content",
                    models.TextField(blank=True, help_text="Plain text content"),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("sent", "Sent"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("retry", "Retry Scheduled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "scheduled_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When to send the email",
                    ),
                ),
                (
                    "process_after",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Do not process before this time",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Email expires and won't be sent after this time",
                        null=True,
                    ),
                ),
                (
                    "attempts",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of send attempts"
                    ),
                ),
                (
                    "max_attempts",
                    models.PositiveIntegerField(
                        default=3, help_text="Maximum retry attempts"
                    ),
                ),
                ("last_attempt_at", models.DateTimeField(blank=True, null=True)),
                ("next_retry_at", models.DateTimeField(blank=True, null=True)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                (
                    "error_message",
                    models.TextField(blank=True, help_text="Last error message"),
                ),
                (
                    "error_details",
                    models.JSONField(
                        blank=True, default=dict, help_text="Detailed error information"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Tags for categorization and filtering",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="utils.emailtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Queue Item",
                "verbose_name_plural": "Email Queue",
                "db_table": "utils_email_queue",
                "ordering": ["-priority", "scheduled_at", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="EmailLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "log_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "to_email",
                    models.EmailField(
                        help_text="Recipient email address",
                        max_length=254,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                (
                    "from_email",
                    models.EmailField(help_text="Sender email address", max_length=254),
                ),
                (
                    "subject",
                    models.CharField(help_text="Email subject", max_length=300),
                ),
                (
                    "content_hash",
                    models.CharField(
                        blank=True,
                        help_text="MD5 hash of content for deduplication",
                        max_length=64,
                    ),
                ),
                (
                    "attachment_info",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Information about email attachments",
                    ),
                ),
                (
                    "total_size_bytes",
                    models.BigIntegerField(
                        default=0, help_text="Total email size including attachments"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("queued", "Queued"),
                            ("sent", "Sent"),
                            ("delivered", "Delivered"),
                            ("opened", "Opened"),
                            ("clicked", "Clicked"),
                            ("bounced", "Bounced"),
                            ("failed", "Failed"),
                            ("spam", "Marked as Spam"),
                            ("unsubscribed", "Unsubscribed"),
                        ],
                        default="queued",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=20,
                    ),
                ),
                ("queued_at", models.DateTimeField(auto_now_add=True)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("delivered_at", models.DateTimeField(blank=True, null=True)),
                ("opened_at", models.DateTimeField(blank=True, null=True)),
                ("first_clicked_at", models.DateTimeField(blank=True, null=True)),
                (
                    "response_code",
                    models.CharField(
                        blank=True, help_text="SMTP response code", max_length=10
                    ),
                ),
                (
                    "response_message",
                    models.TextField(blank=True, help_text="SMTP response message"),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, help_text="Error message if failed"),
                ),
                (
                    "open_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of times opened"
                    ),
                ),
                (
                    "click_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of clicks"
                    ),
                ),
                (
                    "recipient_info",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional recipient information",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="User agent from email opens/clicks"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, help_text="IP address from tracking", null=True
                    ),
                ),
                (
                    "esp_message_id",
                    models.CharField(
                        blank=True, help_text="ESP-specific message ID", max_length=200
                    ),
                ),
                (
                    "esp_response",
                    models.JSONField(
                        blank=True, default=dict, help_text="Full ESP response data"
                    ),
                ),
                (
                    "email_context",
                    models.JSONField(
                        blank=True, default=dict, help_text="Template context used"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional metadata"
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True, default=list, help_text="Tags for categorization"
                    ),
                ),
                (
                    "processed_by",
                    models.CharField(
                        blank=True,
                        help_text="System/worker that processed the email",
                        max_length=100,
                    ),
                ),
                (
                    "processing_time_ms",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Time taken to process in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "queue_item",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="utils.emailqueue",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="utils.emailtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Log",
                "verbose_name_plural": "Email Logs",
                "db_table": "utils_email_log",
                "ordering": ["-queued_at"],
            },
        ),
        migrations.AddField(
            model_name="emailcontentplaceholder",
            name="templates",
            field=models.ManyToManyField(
                blank=True, related_name="placeholders", to="utils.emailtemplate"
            ),
        ),
        migrations.CreateModel(
            name="EmailCampaign",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "campaign_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("name", models.CharField(help_text="Campaign name", max_length=200)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Campaign description"),
                ),
                (
                    "subject_override",
                    models.CharField(
                        blank=True,
                        help_text="Override template subject",
                        max_length=300,
                    ),
                ),
                (
                    "recipient_list",
                    models.JSONField(
                        help_text="List of recipients with their context data"
                    ),
                ),
                (
                    "total_recipients",
                    models.PositiveIntegerField(
                        default=0, help_text="Total number of recipients"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("scheduled", "Scheduled"),
                            ("sending", "Sending"),
                            ("completed", "Completed"),
                            ("paused", "Paused"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                (
                    "scheduled_at",
                    models.DateTimeField(
                        blank=True, help_text="When to start sending", null=True
                    ),
                ),
                (
                    "send_rate_per_hour",
                    models.PositiveIntegerField(
                        default=100, help_text="Maximum emails per hour"
                    ),
                ),
                (
                    "batch_size",
                    models.PositiveIntegerField(
                        default=10, help_text="Emails per batch"
                    ),
                ),
                ("sent_count", models.PositiveIntegerField(default=0)),
                ("failed_count", models.PositiveIntegerField(default=0)),
                ("delivered_count", models.PositiveIntegerField(default=0)),
                ("opened_count", models.PositiveIntegerField(default=0)),
                ("clicked_count", models.PositiveIntegerField(default=0)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="utils.emailtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Campaign",
                "verbose_name_plural": "Email Campaigns",
                "db_table": "utils_email_campaign",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="EmailTemplateAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=False,
                        help_text="Attachment is required for this template",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, help_text="Order of attachment in email"
                    ),
                ),
                (
                    "include_condition",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Conditions for including this attachment",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "attachment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="templates",
                        to="utils.emailattachment",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="utils.emailtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Template Attachment",
                "verbose_name_plural": "Template Attachments",
                "db_table": "utils_email_template_attachment",
                "ordering": ["order", "attachment__name"],
            },
        ),
        migrations.CreateModel(
            name="EmailTemplateContentRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_enabled",
                    models.BooleanField(
                        default=True, help_text="Enable this rule for this template"
                    ),
                ),
                (
                    "priority_override",
                    models.IntegerField(
                        blank=True,
                        help_text="Override rule priority for this template",
                        null=True,
                    ),
                ),
                (
                    "content_override",
                    models.TextField(
                        blank=True,
                        help_text="Override content template for this specific template",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "content_rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="template_associations",
                        to="utils.emailcontentrule",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="template_content_rules",
                        to="utils.emailtemplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Template Content Rule",
                "verbose_name_plural": "Template Content Rules",
                "db_table": "utils_email_template_content_rule",
                "ordering": ["-priority_override", "-content_rule__priority"],
            },
        ),
        migrations.AddField(
            model_name="emailcontentrule",
            name="templates",
            field=models.ManyToManyField(
                related_name="content_rules",
                through="utils.EmailTemplateContentRule",
                to="utils.emailtemplate",
            ),
        ),
        migrations.AddIndex(
            model_name="emailqueue",
            index=models.Index(
                fields=["status", "scheduled_at"], name="utils_email_status_28d6f3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emailqueue",
            index=models.Index(
                fields=["priority", "status"], name="utils_email_priorit_776544_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emailqueue",
            index=models.Index(
                fields=["process_after"], name="utils_email_process_ae6702_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emailqueue",
            index=models.Index(
                fields=["template", "status"], name="utils_email_templat_c4c3c2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emaillog",
            index=models.Index(
                fields=["to_email", "-queued_at"], name="utils_email_to_emai_6e3b53_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emaillog",
            index=models.Index(
                fields=["status", "-queued_at"], name="utils_email_status_08e0eb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emaillog",
            index=models.Index(
                fields=["template", "-queued_at"], name="utils_email_templat_367cb1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emaillog",
            index=models.Index(
                fields=["sent_at"], name="utils_email_sent_at_5184cc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="emaillog",
            index=models.Index(
                fields=["content_hash"], name="utils_email_content_eb7ed1_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="emailtemplateattachment",
            unique_together={("template", "attachment")},
        ),
        migrations.AlterUniqueTogether(
            name="emailtemplatecontentrule",
            unique_together={("template", "content_rule")},
        ),
    ]
