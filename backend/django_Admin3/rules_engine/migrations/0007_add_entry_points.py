# Generated by Django 5.2.2 on 2025-08-05 23:10

import django.db.models.deletion
from django.db import migrations, models


def populate_entry_points(apps, schema_editor):
    """Populate the RuleEntryPoint table with predefined entry points"""
    RuleEntryPoint = apps.get_model('rules_engine', 'RuleEntryPoint')
    
    entry_points = [
        ('home_page_mount', 'Home Page Mount', 'Triggered when the home page is loaded'),
        ('product_list_mount', 'Product List Mount', 'Triggered when product list page is loaded'),
        ('add_to_cart', 'Add to Cart', 'Triggered when a product is added to the cart'),
        ('checkout_start', 'Checkout Start', 'Triggered at the beginning of the checkout process'),
        ('checkout_terms', 'Checkout Terms & Conditions', 'Triggered when terms and conditions are displayed'),
        ('checkout_details', 'Checkout Details', 'Triggered when checkout details are entered'),
        ('checkout_payment_start', 'Checkout Payment Start', 'Triggered when payment process begins'),
        ('checkout_payment_end', 'Checkout Payment End', 'Triggered when payment process completes'),
        ('checkout_order_placed', 'Checkout Order Placed', 'Triggered after successful order placement'),
        ('user_registration_start', 'User Registration Start', 'Triggered at the start of user registration'),
        ('user_registration_end', 'User Registration End', 'Triggered after successful user registration'),
        ('user_authenticated', 'User Authenticated', 'Triggered when user successfully logs in'),
    ]
    
    for code, name, description in entry_points:
        RuleEntryPoint.objects.get_or_create(
            code=code,
            defaults={'name': name, 'description': description, 'is_active': True}
        )


def convert_existing_rules(apps, schema_editor):
    """Convert existing rules from trigger_type to entry_point"""
    Rule = apps.get_model('rules_engine', 'Rule')
    RuleEntryPoint = apps.get_model('rules_engine', 'RuleEntryPoint')
    
    # Mapping from old trigger_type to new entry_point codes
    trigger_mapping = {
        'cart_add': 'add_to_cart',
        'checkout_start': 'checkout_start',
        'checkout_confirm': 'checkout_order_placed',  # Map to closest equivalent
        'product_view': 'product_list_mount',  # Map to closest equivalent
        'login': 'user_authenticated',
        'registration': 'user_registration_end',  # Map to closest equivalent
        'order_complete': 'checkout_order_placed',
    }
    
    for rule in Rule.objects.all():
        if rule.trigger_type and not rule.entry_point:
            new_entry_point_code = trigger_mapping.get(rule.trigger_type)
            if new_entry_point_code:
                try:
                    entry_point = RuleEntryPoint.objects.get(code=new_entry_point_code)
                    rule.entry_point = entry_point
                    rule.save()
                except RuleEntryPoint.DoesNotExist:
                    # Log or handle missing entry point
                    pass


def reverse_entry_points(apps, schema_editor):
    """Reverse migration - restore trigger_type from entry_point"""
    Rule = apps.get_model('rules_engine', 'Rule')
    
    # Reverse mapping from entry_point codes to trigger_type
    reverse_mapping = {
        'add_to_cart': 'cart_add',
        'checkout_start': 'checkout_start',
        'checkout_order_placed': 'checkout_confirm',
        'product_list_mount': 'product_view',
        'user_authenticated': 'login',
        'user_registration_end': 'registration',
    }
    
    for rule in Rule.objects.all():
        if rule.entry_point and not rule.trigger_type:
            old_trigger_type = reverse_mapping.get(rule.entry_point.code)
            if old_trigger_type:
                rule.trigger_type = old_trigger_type
                rule.save()


class Migration(migrations.Migration):

    dependencies = [
        ("rules_engine", "0006_alter_ruleaction_action_type"),
    ]

    operations = [
        migrations.CreateModel(
            name="RuleEntryPoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        choices=[
                            ("home_page_mount", "Home Page Mount"),
                            ("product_list_mount", "Product List Mount"),
                            ("add_to_cart", "Add to Cart"),
                            ("checkout_start", "Checkout Start"),
                            ("checkout_terms", "Checkout Terms & Conditions"),
                            ("checkout_details", "Checkout Details"),
                            ("checkout_payment_start", "Checkout Payment Start"),
                            ("checkout_payment_end", "Checkout Payment End"),
                            ("checkout_order_placed", "Checkout Order Placed"),
                            ("user_registration_start", "User Registration Start"),
                            ("user_registration_end", "User Registration End"),
                            ("user_authenticated", "User Authenticated"),
                        ],
                        max_length=30,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Rule Entry Point",
                "verbose_name_plural": "Rule Entry Points",
                "db_table": "acted_rule_entry_points",
                "ordering": ["code"],
            },
        ),
        migrations.AlterField(
            model_name="rule",
            name="trigger_type",
            field=models.CharField(
                blank=True,
                choices=[
                    ("cart_add", "Add to Cart"),
                    ("checkout_start", "Checkout Start"),
                    ("checkout_confirm", "Checkout Confirm"),
                    ("product_view", "Product View"),
                    ("login", "User Login"),
                    ("registration", "User Registration"),
                    ("order_complete", "Order Complete"),
                ],
                max_length=20,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="rule",
            name="entry_point",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="rules",
                to="rules_engine.ruleentrypoint",
            ),
        ),
        # Populate entry points table
        migrations.RunPython(
            populate_entry_points,
            reverse_code=migrations.RunPython.noop,
        ),
        # Convert existing rules to use entry points
        migrations.RunPython(
            convert_existing_rules,
            reverse_code=reverse_entry_points,
        ),
    ]
