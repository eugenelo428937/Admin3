# Generated by Django 5.2.2 on 2025-09-01 12:38

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ActedRulesFields",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fields_id",
                    models.CharField(
                        help_text="Unique identifier for the schema",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable schema name", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this schema"
                    ),
                ),
                (
                    "schema",
                    models.JSONField(
                        help_text="JSON Schema definition for context validation"
                    ),
                ),
                (
                    "version",
                    models.IntegerField(default=1, help_text="Schema version number"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this schema is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Acted Rules Fields Schema",
                "verbose_name_plural": "Acted Rules Fields Schemas",
                "db_table": "acted_rules_fields",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ContentStyleTheme",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Content Style Theme",
                "verbose_name_plural": "Content Style Themes",
                "db_table": "acted_content_style_themes",
            },
        ),
        migrations.CreateModel(
            name="MessageTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "content_format",
                    models.CharField(
                        choices=[
                            ("html", "HTML Content"),
                            ("json", "JSON Structure"),
                            ("markdown", "Markdown"),
                        ],
                        default="html",
                        help_text="Format of the content field",
                        max_length=10,
                    ),
                ),
                (
                    "json_content",
                    models.JSONField(
                        blank=True,
                        help_text="Structured JSON content for rendering with Material UI components",
                        null=True,
                    ),
                ),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("success", "Success"),
                            ("terms", "Terms & Conditions"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "variables",
                    models.JSONField(
                        default=list,
                        help_text="List of variable names used in template",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Message Template",
                "verbose_name_plural": "Message Templates",
                "db_table": "acted_rules_message_templates",
            },
        ),
        migrations.CreateModel(
            name="Rule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "trigger_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("cart_add", "Add to Cart"),
                            ("checkout_start", "Checkout Start"),
                            ("checkout_confirm", "Checkout Confirm"),
                            ("product_view", "Product View"),
                            ("login", "User Login"),
                            ("registration", "User Registration"),
                            ("order_complete", "Order Complete"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=100, help_text="Lower numbers = higher priority"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_blocking",
                    models.BooleanField(
                        default=False,
                        help_text="If true, user must acknowledge before proceeding",
                    ),
                ),
                (
                    "success_criteria",
                    models.CharField(
                        choices=[
                            ("all_conditions", "All conditions must pass"),
                            ("any_condition", "At least one condition must pass"),
                            (
                                "custom_function",
                                "Use custom function to determine success",
                            ),
                        ],
                        default="all_conditions",
                        help_text="Criteria for determining if this rule succeeds",
                        max_length=20,
                    ),
                ),
                (
                    "success_function",
                    models.CharField(
                        blank=True,
                        help_text="Custom function name for success criteria evaluation",
                        max_length=100,
                    ),
                ),
                (
                    "return_on_failure",
                    models.BooleanField(
                        default=False,
                        help_text="Return false and stop chain execution if this rule fails",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Rule",
                "verbose_name_plural": "Rules",
                "db_table": "acted_rules",
                "ordering": ["priority", "id"],
            },
        ),
        migrations.CreateModel(
            name="RuleEntryPoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        choices=[
                            ("home_page_mount", "Home Page Mount"),
                            ("product_list_mount", "Product List Mount"),
                            ("product_card_mount", "Product Card Mount"),
                            ("checkout_start", "Checkout Start"),
                            ("checkout_preference", "Checkout Preference"),
                            ("checkout_terms", "Checkout Terms"),
                            ("checkout_payment", "Checkout Payment"),
                        ],
                        max_length=30,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Rule Entry Point",
                "verbose_name_plural": "Rule Entry Points",
                "db_table": "acted_rule_entry_points",
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="ActedRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rule_id",
                    models.CharField(
                        help_text="Unique identifier for the rule",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable rule name", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of what this rule does"
                    ),
                ),
                (
                    "entry_point",
                    models.CharField(
                        help_text="Entry point code where this rule triggers",
                        max_length=50,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=100, help_text="Lower numbers = higher priority"
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True, help_text="Whether this rule is active"
                    ),
                ),
                (
                    "version",
                    models.IntegerField(default=1, help_text="Rule version number"),
                ),
                (
                    "rules_fields_id",
                    models.CharField(
                        blank=True,
                        help_text="ID of the ActedRulesFields schema for context validation",
                        max_length=100,
                    ),
                ),
                (
                    "condition",
                    models.JSONField(help_text="JSONLogic condition expression"),
                ),
                (
                    "actions",
                    models.JSONField(
                        help_text="Array of actions to execute when condition is true"
                    ),
                ),
                (
                    "stop_processing",
                    models.BooleanField(
                        default=False,
                        help_text="Stop processing other rules if this rule matches",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata about the rule",
                    ),
                ),
                (
                    "active_from",
                    models.DateTimeField(
                        blank=True, help_text="When this rule becomes active", null=True
                    ),
                ),
                (
                    "active_until",
                    models.DateTimeField(
                        blank=True, help_text="When this rule expires", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Acted Rule",
                "verbose_name_plural": "Acted Rules",
                "db_table": "acted_rules_engine",
                "ordering": ["entry_point", "priority", "created_at"],
                "indexes": [
                    models.Index(
                        fields=["entry_point", "active", "priority"],
                        name="acted_rules_entry_active",
                    ),
                    models.Index(fields=["rule_id"], name="acted_rules_rule_id"),
                    models.Index(
                        fields=["active", "entry_point"], name="acted_rules_active_ent"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ActedRuleExecution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "execution_id",
                    models.CharField(
                        help_text="Unique execution identifier",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "rule_id",
                    models.CharField(
                        help_text="ID of the executed rule", max_length=100
                    ),
                ),
                (
                    "entry_point",
                    models.CharField(
                        help_text="Entry point that triggered the rule", max_length=50
                    ),
                ),
                (
                    "context_snapshot",
                    models.JSONField(help_text="Context data at time of execution"),
                ),
                (
                    "actions_result",
                    models.JSONField(help_text="Results of action execution"),
                ),
                (
                    "outcome",
                    models.CharField(
                        help_text="Execution outcome (success, blocked, error)",
                        max_length=50,
                    ),
                ),
                (
                    "execution_time_ms",
                    models.FloatField(help_text="Execution time in milliseconds"),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if execution failed"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Acted Rule Execution",
                "verbose_name_plural": "Acted Rule Executions",
                "db_table": "acted_rule_executions",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["rule_id", "created_at"], name="acted_exec_rule_created"
                    ),
                    models.Index(
                        fields=["entry_point", "created_at"],
                        name="acted_exec_entry_created",
                    ),
                    models.Index(
                        fields=["outcome", "created_at"], name="acted_exec_outcome_crtd"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ContentStyle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Unique name for this style",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "element_type",
                    models.CharField(
                        choices=[
                            ("container", "Container"),
                            ("box", "Box"),
                            ("p", "Paragraph"),
                            ("h1", "Heading 1"),
                            ("h2", "Heading 2"),
                            ("h3", "Heading 3"),
                            ("h4", "Heading 4"),
                            ("h5", "Heading 5"),
                            ("h6", "Heading 6"),
                            ("ul", "Unordered List"),
                            ("ol", "Ordered List"),
                            ("li", "List Item"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("alert", "Alert/Notice"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("success", "Success"),
                            ("info", "Information"),
                            ("holiday", "Holiday Notice"),
                            ("terms", "Terms & Conditions"),
                            ("general", "General"),
                        ],
                        default="general",
                        max_length=20,
                    ),
                ),
                (
                    "css_class_selector",
                    models.CharField(
                        blank=True,
                        help_text="CSS class that triggers this style (e.g., 'alert alert-warning')",
                        max_length=200,
                    ),
                ),
                (
                    "background_color",
                    models.CharField(
                        blank=True,
                        help_text="e.g., #fff3cd, rgba(255,243,205,1)",
                        max_length=20,
                    ),
                ),
                (
                    "text_color",
                    models.CharField(
                        blank=True, help_text="e.g., #856404, #000000", max_length=20
                    ),
                ),
                (
                    "border_color",
                    models.CharField(
                        blank=True, help_text="e.g., #ffeaa7", max_length=20
                    ),
                ),
                (
                    "border_width",
                    models.CharField(
                        default="1px", help_text="e.g., 1px, 2px, 0", max_length=10
                    ),
                ),
                (
                    "border_radius",
                    models.CharField(
                        default="4px", help_text="e.g., 4px, 8px, 0", max_length=10
                    ),
                ),
                (
                    "padding",
                    models.CharField(
                        default="12px 16px",
                        help_text="e.g., 12px 16px, 10px",
                        max_length=20,
                    ),
                ),
                (
                    "margin",
                    models.CharField(
                        default="0 0 16px 0",
                        help_text="e.g., 0 0 16px 0, 10px",
                        max_length=20,
                    ),
                ),
                (
                    "font_size",
                    models.CharField(
                        blank=True,
                        help_text="e.g., 14px, 1.2rem, inherit",
                        max_length=10,
                    ),
                ),
                (
                    "font_weight",
                    models.CharField(
                        blank=True, help_text="e.g., normal, bold, 600", max_length=10
                    ),
                ),
                (
                    "text_align",
                    models.CharField(
                        default="left",
                        help_text="left, center, right, justify",
                        max_length=10,
                    ),
                ),
                (
                    "custom_styles",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional CSS properties as JSON (e.g., {'boxShadow': '0 2px 4px rgba(0,0,0,0.1)'})",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "priority",
                    models.IntegerField(
                        default=100,
                        help_text="Higher numbers = higher priority when multiple styles match",
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "theme",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="styles",
                        to="rules_engine.contentstyletheme",
                    ),
                ),
            ],
            options={
                "verbose_name": "Content Style",
                "verbose_name_plural": "Content Styles",
                "db_table": "acted_content_styles",
                "ordering": ["-priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="HolidayCalendar",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("date", models.DateField()),
                (
                    "country",
                    models.CharField(
                        default="GB", help_text="ISO country code", max_length=2
                    ),
                ),
                ("is_business_day", models.BooleanField(default=False)),
                (
                    "delivery_delay_days",
                    models.IntegerField(
                        default=0,
                        help_text="Additional delivery delay for this holiday",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Holiday",
                "verbose_name_plural": "Holiday Calendar",
                "db_table": "acted_holiday_calendar",
                "unique_together": {("date", "country")},
            },
        ),
        migrations.CreateModel(
            name="MessageTemplateStyle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "custom_styles",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Override specific styles for this template",
                        to="rules_engine.contentstyle",
                    ),
                ),
                (
                    "message_template",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="style_config",
                        to="rules_engine.messagetemplate",
                    ),
                ),
                (
                    "theme",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="rules_engine.contentstyletheme",
                    ),
                ),
            ],
            options={
                "verbose_name": "Message Template Style",
                "verbose_name_plural": "Message Template Styles",
                "db_table": "acted_message_template_styles",
            },
        ),
        migrations.CreateModel(
            name="RuleAction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("display", "Display Message"),
                            ("acknowledge", "Require Acknowledgment"),
                            ("update", "Update Values"),
                            ("custom", "Custom Function"),
                            ("show_message", "Show Message"),
                            ("require_acknowledgment", "Require Acknowledgment"),
                            ("redirect", "Redirect"),
                            ("send_email", "Send Email"),
                            ("log_event", "Log Event"),
                            ("custom_function", "Custom Function"),
                            ("calculate_vat", "Calculate VAT"),
                            ("apply_discount", "Apply Discount"),
                            ("calculate_fee", "Calculate Fee"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        default=dict, help_text="Additional parameters for the action"
                    ),
                ),
                ("execution_order", models.IntegerField(default=1)),
                (
                    "message_template",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rules_engine.messagetemplate",
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="actions",
                        to="rules_engine.rule",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rule Action",
                "verbose_name_plural": "Rule Actions",
                "db_table": "acted_rule_actions",
                "ordering": ["execution_order"],
            },
        ),
        migrations.CreateModel(
            name="RuleConditionGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "logical_operator",
                    models.CharField(
                        choices=[
                            ("AND", "All conditions must be true"),
                            ("OR", "At least one condition must be true"),
                        ],
                        default="AND",
                        max_length=3,
                    ),
                ),
                ("execution_order", models.IntegerField(default=1)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "parent_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent group for nested conditions",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_groups",
                        to="rules_engine.ruleconditiongroup",
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="condition_groups",
                        to="rules_engine.rule",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rule Condition Group",
                "verbose_name_plural": "Rule Condition Groups",
                "db_table": "acted_rule_condition_groups",
                "ordering": ["rule", "execution_order"],
            },
        ),
        migrations.CreateModel(
            name="RuleCondition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "condition_type",
                    models.CharField(
                        choices=[
                            ("product_category", "Product Category"),
                            ("product_code", "Product Code"),
                            ("product_type", "Product Type"),
                            ("user_type", "User Type"),
                            ("date_range", "Date Range"),
                            ("holiday_proximity", "Holiday Proximity"),
                            ("cart_value", "Cart Value"),
                            ("cart_item_count", "Cart Item Count"),
                            ("user_order_history", "User Order History"),
                            ("custom_field", "Custom Field"),
                            ("user_country", "User Country"),
                            ("user_home_address", "User Home Address"),
                            ("user_home_email", "User Home Email"),
                            ("user_work_address", "User Work Address"),
                            ("user_work_email", "User Work Email"),
                            ("user_is_reduced_rate", "User Is Reduced Rate"),
                            ("user_is_apprentice", "User Is Apprentice"),
                            ("user_is_caa", "User Is CAA"),
                            ("user_is_study_plus", "User Is Study Plus"),
                            ("cart_has_material", "Cart Has Material"),
                            ("cart_has_marking", "Cart Has Marking"),
                            ("cart_has_tutorial", "Cart Has Tutorial"),
                            ("product_variations", "Product Variations"),
                            ("material_despatch_date", "Material Despatch Date"),
                            ("marking_expired_deadlines", "Marking Expired Deadlines"),
                            ("tutorial_has_started", "Tutorial Has Started"),
                            (
                                "exam_session_transition_period",
                                "Exam Session Transition Period",
                            ),
                            ("date_xmas", "Christmas Period"),
                            ("date_easter", "Easter Period"),
                            ("checkout_payment_method", "Checkout Payment Method"),
                            ("checkout_employer_code", "Checkout Employer Code"),
                            (
                                "cart_item_expired_deadline",
                                "Cart Item Has Expired Deadline",
                            ),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "field_name",
                    models.CharField(
                        help_text="Field to evaluate (e.g., 'product.type', 'user.email')",
                        max_length=100,
                    ),
                ),
                (
                    "operator",
                    models.CharField(
                        choices=[
                            ("equals", "Equals"),
                            ("not_equals", "Not Equals"),
                            ("contains", "Contains"),
                            ("not_contains", "Does Not Contain"),
                            ("greater_than", "Greater Than"),
                            ("less_than", "Less Than"),
                            ("between", "Between"),
                            ("in_list", "In List"),
                            ("not_in_list", "Not In List"),
                            ("regex", "Regular Expression"),
                            ("custom_function", "Custom Function"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="Value to compare against (can be JSON for complex values)"
                    ),
                ),
                (
                    "is_negated",
                    models.BooleanField(
                        default=False, help_text="Negate the condition result"
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conditions",
                        to="rules_engine.rule",
                    ),
                ),
                (
                    "condition_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Optional condition group this condition belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conditions",
                        to="rules_engine.ruleconditiongroup",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rule Condition",
                "verbose_name_plural": "Rule Conditions",
                "db_table": "acted_rule_conditions",
            },
        ),
        migrations.CreateModel(
            name="RuleChain",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "stop_on_failure",
                    models.BooleanField(
                        default=True, help_text="Stop chain execution if any rule fails"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "entry_point",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chains",
                        to="rules_engine.ruleentrypoint",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rule Chain",
                "verbose_name_plural": "Rule Chains",
                "db_table": "acted_rule_chains",
                "ordering": ["entry_point__code", "name"],
            },
        ),
        migrations.AddField(
            model_name="rule",
            name="entry_point",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="rules",
                to="rules_engine.ruleentrypoint",
            ),
        ),
        migrations.CreateModel(
            name="RuleExecution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("trigger_context", models.JSONField(default=dict)),
                ("conditions_met", models.BooleanField()),
                ("actions_executed", models.JSONField(default=list)),
                ("execution_time", models.DateTimeField(auto_now_add=True)),
                ("error_message", models.TextField(blank=True)),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rules_engine.rule",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Rule Execution (Legacy)",
                "verbose_name_plural": "Rule Executions (Legacy)",
                "db_table": "acted_rule_executions_legacy",
            },
        ),
        migrations.CreateModel(
            name="RuleChainLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "execution_order",
                    models.IntegerField(
                        help_text="Order of execution within the chain"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "continue_on_failure",
                    models.BooleanField(
                        default=False,
                        help_text="Continue to next rule even if this one fails",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "chain",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="rules_engine.rulechain",
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chain_links",
                        to="rules_engine.rule",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rule Chain Link",
                "verbose_name_plural": "Rule Chain Links",
                "db_table": "acted_rule_chain_links",
                "ordering": ["chain", "execution_order"],
                "unique_together": {("chain", "rule")},
            },
        ),
        migrations.CreateModel(
            name="UserAcknowledgment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "acknowledgment_type",
                    models.CharField(
                        choices=[
                            ("required", "Required Acknowledgment"),
                            ("optional", "Optional Selection"),
                            ("preference", "User Preference"),
                        ],
                        default="required",
                        max_length=20,
                    ),
                ),
                (
                    "is_selected",
                    models.BooleanField(
                        default=False,
                        help_text="For optional rules, whether user selected this option",
                    ),
                ),
                ("acknowledged_at", models.DateTimeField(auto_now_add=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                (
                    "session_data",
                    models.JSONField(
                        default=dict, help_text="Additional session context"
                    ),
                ),
                (
                    "message_template",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rules_engine.messagetemplate",
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rules_engine.rule",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Acknowledgment",
                "verbose_name_plural": "User Acknowledgments",
                "db_table": "acted_rules_user_acknowledgments",
                "unique_together": {("user", "rule", "message_template")},
            },
        ),
    ]
