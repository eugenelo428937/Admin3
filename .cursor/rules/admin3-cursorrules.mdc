---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for Admin3 Project

Always use Powershell when running scripts. When joinning command use ";;" instead of "&&"

## Project Context
Admin3 is a Django REST API backend with React frontend for educational administration data management, integrating with the Administrate API for course management, tutorials, events, and student administration.

## Technology Stack
- Backend: Django 5.1, Django REST Framework, PostgreSQL
- Frontend: React 18, Axios, Material-UI
- Integration: GraphQL queries to Administrate API
- Authentication: JWT tokens with refresh mechanism
- Database: PostgreSQL (ACTEDDBDEV01)

## Development Environment Setting
- Windows 11
- Powershell for command prompt
- Django server is always running on Port 8888.
- React Server is running on default 3000 Port.

## Django Backend Rules

### Models
- Use snake_case for field names and model methods
- Store external API IDs as `external_id` fields
- Include proper `__str__` methods for all models
- Use proper model relationships (ForeignKey, ManyToMany)
- Add validation methods with `clean()` where needed
- Use `active` boolean fields for soft deletes

### Views and Serializers
- Use class-based views with Django REST Framework
- Follow model-view-serializer pattern
- Include proper pagination for list views
- Use select_related/prefetch_related for query optimization
- Handle errors gracefully with proper HTTP status codes

### Management Commands
- Store in `management/commands/` directories
- Include `--debug` flags for verbose output
- Use transactions for data consistency
- Add progress indicators for long-running operations

## React Frontend Rules

### Components
- Use functional components with hooks
- PascalCase for component names
- camelCase for props and state variables
- Use Material-UI components consistently
- Implement proper loading states and error handling

### Services
- Centralize API calls in service layer
- Use async/await for API calls
- Handle authentication token refresh automatically
- Include proper error handling and logging

### Styling
- Use CSS modules or component-specific CSS files
- Follow kebab-case for CSS class names
- Implement responsive design patterns
- Use Material-UI theme consistently

## API Integration Rules

### GraphQL Queries
- Store GraphQL queries in separate files under `administrate/queries/`
- Use descriptive file names (e.g., `get_all_locations.graphql`)
- Handle base64 encoded IDs from Administrate API
- Include proper error handling for API timeouts

### External API Calls
- Use `AdministrateAPIService` for external API calls
- Implement retry mechanisms for failed requests
- Add rate limiting considerations
- Validate data before processing

## Database Rules

### Schema Design
- Use proper foreign key constraints
- Index frequently queried fields
- Follow the established model relationships:
  - Products -> ProductVariations
  - ExamSessions -> ExamSessionSubjects -> ExamSessionSubjectProducts
  - Orders -> OrderItems
  - Cart -> CartItems

### Migrations
- Always create migrations for model changes
- Use descriptive migration names
- Test migrations on development data first

## Email System Rules

### Email Architecture Overview
Admin3 uses a sophisticated email system with master template approach, queue processing, and comprehensive logging for cross-client compatibility and debugging.

### Database Schema (utils app)

#### EmailTemplate Model
Manages email template configurations and routing logic:
```python
- name (CharField): Template identifier (e.g., 'order_confirmation')
- subject (CharField): Default email subject
- description (TextField): Template purpose description
- use_master_template (BooleanField): Whether to use master template system
- content_template_name (CharField): Content template filename for master system
- enable_queue (BooleanField): Whether emails should be queued
- priority (CharField): Default priority (low/normal/high/urgent)
- is_active (BooleanField): Template availability status
- created_at/updated_at: Timestamps
```

#### EmailQueue Model
Manages email queue processing with retry logic:
```python
- queue_id (UUIDField): Unique queue identifier
- template_name (CharField): Reference to EmailTemplate
- to_emails (JSONField): Recipient email addresses
- subject (CharField): Email subject (can override template default)
- context_data (JSONField): Template context variables
- priority (CharField): Processing priority
- status (CharField): pending/processing/sent/failed/retry/cancelled
- scheduled_at (DateTimeField): When to send email
- max_retry_attempts (IntegerField): Maximum retry count (default: 3)
- retry_count (IntegerField): Current retry attempts
- error_details (JSONField): Failure information for debugging
- user (ForeignKey): User who initiated the email
- created_at/updated_at/processed_at: Timestamps
```

#### EmailLog Model
Comprehensive logging for debugging and monitoring:
```python
- log_id (UUIDField): Unique log identifier
- queue_item (ForeignKey): Optional reference to EmailQueue
- template_name (CharField): Template used
- to_emails (JSONField): Recipients
- subject (CharField): Email subject
- status (CharField): sent/failed/opened/clicked
- esp_response (JSONField): Detailed server response with SMTP codes
- esp_message_id (CharField): Email service provider message ID
- error_details (JSONField): Structured error information
- processing_time_ms (IntegerField): Email processing duration
- user (ForeignKey): User who initiated email
- created_at/updated_at: Timestamps
```

#### EmailAttachment Model
File attachments for email templates:
```python
- template (ForeignKey): Associated EmailTemplate
- file_path (CharField): Path to attachment file
- filename (CharField): Display name for attachment
- content_type (CharField): MIME type
- is_active (BooleanField): Attachment availability
```

### Master Template System

#### Architecture
Uses a hierarchical template structure with dynamic content injection:

```
utils/templates/emails/mjml/
â”œâ”€â”€ master_template.mjml              # Base template with banner, footer, styles
â”œâ”€â”€ styles.mjml                       # Shared CSS includes
â”œâ”€â”€ banner.mjml                       # Header component
â”œâ”€â”€ footer.mjml                       # Footer component
â”œâ”€â”€ order_confirmation_content.mjml   # Order-specific content
â”œâ”€â”€ password_reset_content.mjml       # Password reset content
â””â”€â”€ account_activation_content.mjml   # Activation content
```

#### Master Template Structure
```mjml
<mjml>
  <mj-head>
    <mj-title>{{ email_title|default:"Email from ActEd" }}</mj-title>
    <mj-preview>{{ email_preview|default:"Email from ActEd" }}</mj-preview>
    <mj-include path="./styles.mjml" />
  </mj-head>
  
  <mj-body background-color="#f3f3f3" width="600px">
    {% if dev_mode_active %}
    <!-- Development Mode Warning -->
    <mj-section background-color="#fadede">
      <mj-column>
        <mj-text>ðŸš§ DEVELOPMENT MODE ðŸš§<br/>
          Original recipient: {{ dev_original_recipients|join:", " }}
        </mj-text>
      </mj-column>
    </mj-section>
    {% endif %}
    
    <mj-wrapper>
      <mj-include path="./banner.mjml" />
      
      <!-- Dynamic Content Section -->
      {{ email_content|safe }}
      
      <mj-include path="./footer.mjml" />
    </mj-wrapper>
  </mj-body>
</mjml>
```

#### Content Template Pattern
Each email type has its own content template:
```mjml
<!-- order_confirmation_content.mjml -->
<mj-section background-color="#ffffff">
  <mj-column padding="24px">
    <mj-text>
      Dear {{ first_name }},<br/>
      Your order {{ order_number }} has been confirmed.
    </mj-text>
    <!-- Order-specific content -->
  </mj-column>
</mj-section>
```

### Email Service Usage

#### Core Email Types
Three main email types use the master template system:

1. **Order Confirmation**
   - Template: `order_confirmation`
   - Content: `order_confirmation_content.mjml`
   - Context: order data, customer info, items list
   - Priority: high

2. **Password Reset**
   - Template: `password_reset`
   - Content: `password_reset_content.mjml`
   - Context: user data, reset URL, expiry time
   - Priority: urgent

3. **Account Activation**
   - Template: `account_activation`
   - Content: `account_activation_content.mjml`
   - Context: user data, activation URL
   - Priority: high

#### Sending Emails
```python
from utils.email_service import email_service

# Order confirmation with queue
success = email_service.send_order_confirmation(
    user_email='customer@example.com',
    order_data={
        'order_number': 'ORD-000123',
        'customer_name': 'John Doe',
        'total_amount': 299.99,
        'items': [...],
        'created_at': datetime.now()
    },
    use_queue=True,
    priority='high'
)

# Immediate send (bypass queue)
success = email_service.send_password_reset(
    user_email='user@example.com',
    reset_data={
        'user': user_obj,
        'reset_url': 'https://example.com/reset?token=abc123',
        'expiry_minutes': 15
    },
    use_queue=False
)
```

### Queue Processing

#### Management Command
Process emails from queue using management command:
```bash
# Process up to 50 emails
python manage.py process_email_queue

# Process specific number
python manage.py process_email_queue --max-emails 100

# Force process failed emails
python manage.py process_email_queue --retry-failed

# Debug mode with verbose output
python manage.py process_email_queue --debug
```

#### Queue Service Features
- **Batch Processing**: Processes multiple emails efficiently
- **Retry Logic**: Automatic retry for failed emails with exponential backoff
- **Priority Handling**: Processes urgent emails first
- **Error Recovery**: Detailed error capture and logging
- **Development Mode**: Email redirection for testing
- **Rate Limiting**: Prevents overwhelming email providers

#### Queue Processing Flow
1. Fetch pending emails by priority and scheduled time
2. Render email templates with context data
3. Send via SMTP with detailed response capture
4. Log comprehensive results including server responses
5. Update queue status and retry failed items
6. Generate processing statistics

### Development Features

#### Email Override for Testing
```python
# settings/development.py
DEV_EMAIL_OVERRIDE = True
DEV_EMAIL_RECIPIENTS = ['developer@example.com']
```
All emails redirect to developer addresses with original recipient info shown in email header.

#### Email Testing Commands
```bash
# Send test email
python manage.py test_emails send --template order_confirmation --email test@example.com

# Generate preview files
python manage.py test_emails preview --template password_reset --save

# Validate template compatibility
python manage.py test_emails validate --template account_activation

# Generate comprehensive report
python manage.py test_emails report

# Test Outlook compatibility
python manage.py test_emails outlook-test --template order_confirmation
```

### Email Response Logging

The system captures detailed server responses instead of basic success/failure:

#### Response Structure
```json
{
  "success": true,
  "response_code": "250",
  "response_message": "Email sent successfully to 2 recipients",
  "esp_response": {
    "backend": "django.core.mail.backends.smtp.EmailBackend",
    "send_result": 1,
    "recipients_count": 2,
    "message_size": 15420,
    "timestamp": "2025-06-19T15:30:00Z"
  },
  "esp_message_id": "message_id_if_available",
  "error_details": {
    "exception_type": "SMTPException",
    "processing_stage": "smtp_sending"
  }
}
```

#### Error Debugging
- **Template Errors**: "Invalid block tag on line 86: 'endif'"
- **SMTP Errors**: Authentication failures, connection issues
- **Processing Stage**: Know exactly where failures occur
- **Performance Metrics**: Processing times, message sizes

### Cross-Client Compatibility

#### MJML + Premailer Enhancement
- **MJML**: Responsive email framework with reliable table layouts
- **Premailer**: CSS inlining and Outlook-specific optimizations
- **Combined Approach**: Best of both worlds for maximum compatibility

#### Outlook Specific Features
- Enhanced DOCTYPE declarations
- MSO conditional comments
- Table attribute fixes (cellpadding, cellspacing)
- Border fixes for images
- Line-height inheritance corrections

### Email Template Rules

#### Template Development
- Use MJML for responsive layouts and cross-client compatibility
- Keep content templates focused on specific email content only
- Use master template for consistent branding and structure
- Apply proper CSS classes for styling consistency
- Include proper alt text for images

#### Context Data Formatting
- Pre-format dates in Python (avoid Django template filters in MJML)
- Use structured data objects for template compatibility
- Include all necessary context for email rendering
- Handle missing data gracefully with defaults

#### Testing Requirements
- Test in multiple email clients (Outlook, Gmail, Apple Mail)
- Validate HTML/CSS compatibility
- Check responsive design on mobile devices
- Verify all template variables render correctly
- Test queue processing and retry mechanisms

### Digital Content Logic

#### Product Variation-Based Digital Detection
The system correctly determines `is_digital` flag based on specific product variations rather than product groups:

```python
# Check variation type instead of product groups
if item.metadata and item.metadata.get('variationId'):
    try:
        ppv = ProductProductVariation.objects.select_related('product_variation').get(
            id=item.metadata.get('variationId')
        )
        variation_type = ppv.product_variation.variation_type.lower()
        is_digital = variation_type in ['ebook', 'hub']  # Digital variation types
    except ProductProductVariation.DoesNotExist:
        # Fallback to checking product groups if variation not found
        is_digital = item.product.product.groups.filter(id__in=[14, 11]).exists()
```

#### Digital Content Testing Commands
```bash
# Test specific variation
python manage.py test_digital_content --variation-id 2

# Test all variations to see digital vs physical
python manage.py test_digital_content

# Test cart item logic
python manage.py test_digital_content --cart-item-id 123
```

#### Variation Types
- **Digital Types**: eBook, Hub (is_digital = True)
- **Physical Types**: Printed, Tutorial, Marking (is_digital = False)

### Dynamic Content Rules

#### Content Placeholders and Rules
The email system uses dynamic content insertion based on order context:

**Available Placeholders:**
- `{{DIGITAL_CONTENT}}` - Digital access instructions (shows when is_digital = true)
- `{{BANK_PAYMENT}}` - Credit card payment confirmation (shows when is_invoice = false)
- `{{INVOICE_PAYMENT}}` - Invoice payment notification (shows when is_invoice = true)
- `{{EMPLOYER_REVIEW}}` - Employer sponsorship messaging (shows when employer_code exists)
- `{{TUTORIAL_CONTENT}}` - Tutorial-specific information (shows when is_tutorial = true)

#### Content Rule Testing
```bash
# Test content insertion system
python manage.py test_content_insertion --scenario digital_order

# Test specific scenarios
python manage.py test_content_insertion --scenario invoice_order
python manage.py test_content_insertion --scenario employer_sponsored
python manage.py test_content_insertion --scenario tutorial_booking

# Debug rule evaluation
python manage.py test_rule_evaluation
```

## Security Rules

### Environment Variables
- Store sensitive data in .env files
- Never commit credentials to version control
- Use environment-specific configurations

### Authentication
- Use JWT tokens with proper refresh mechanism
- Implement CORS configuration for React frontend
- Enable CSRF protection where appropriate
- Validate all user inputs

## Testing Rules

### Django Tests
- Use Django REST Framework's APITestCase
- Include test data setup in setUp() methods
- Use force_authenticate() for authenticated tests
- Test both success and error scenarios
- Mock external API calls in tests

### React Tests
- Test component rendering and user interactions
- Mock API calls in component tests
- Test form validation and error handling
- Use descriptive test names

## File Organization

### Backend Structure
```
backend/django_Admin3/
â”œâ”€â”€ django_Admin3/          # Main project settings
â”œâ”€â”€ subjects/               # Subject management
â”œâ”€â”€ tutorials/              # Tutorial events
â”œâ”€â”€ administrate/           # External API integration
â”œâ”€â”€ core_auth/              # Authentication
â””â”€â”€ manage.py
```

### Frontend Structure
```
frontend/react-Admin3/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ components/         # React components
â”‚   â”œâ”€â”€ services/           # API service layer
â”‚   â””â”€â”€ styles/             # CSS styling
â””â”€â”€ public/
```

## Code Quality Rules

### Python Code
- Follow PEP 8 style guidelines
- Use type hints where appropriate
- Include docstrings for classes and methods
- Limit line length to 88 characters (Black formatter)
- Use f-strings for string formatting

### JavaScript Code
- Use ES6+ features consistently
- Include proper error boundaries
- Use destructuring for props and state
- Implement proper cleanup in useEffect hooks
- Follow ESLint and Prettier configurations

## Common Patterns to Follow

### Error Handling
```python
try:
    # API call or database operation
    result = api_service.execute_query(query, variables)
except Exception as e:
    logger.error(f"Operation failed: {str(e)}")
    return Response({"error": "Operation failed"}, status=500)
```

### React Component Structure
```javascript
const ComponentName = () => {
    const [data, setData] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    
    useEffect(() => {
        fetchData();
    }, []);
    
    const fetchData = async () => {
        try {
            setLoading(true);
            const response = await apiService.getData();
            setData(response.data);
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    };
    
    if (loading) return <CircularProgress />;
    if (error) return <Alert severity="error">{error}</Alert>;
    
    return <div>{/* Component content */}</div>;
};
```

## Commit Message Format
- Use conventional commits format
- Include scope when applicable (e.g., "feat(auth): add JWT refresh")
- Keep first line under 50 characters
- Include detailed description for complex changes

## Documentation Requirements
- Update README files for setup changes
- Document API endpoints with examples
- Include inline comments for complex business logic
- Maintain up-to-date requirements files

## Performance Considerations
- Use pagination for large datasets
- Implement lazy loading where appropriate
- Cache frequently accessed data
- Optimize database queries with proper indexing
- Use React.memo for expensive components

## Debugging Guidelines
- Use Django's logging framework for backend
- Include debug flags in management commands
- Use React Developer Tools for frontend debugging
- Log API requests and responses in development mode
- Include structured error messages with context

